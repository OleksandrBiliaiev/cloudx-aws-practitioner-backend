service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: "3"

# Add the serverless-webpack plugin
plugins:
  - serverless-openapi-documentation
  - serverless-webpack
  - serverless-lift

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  iam:
    role: arn:aws:iam::043770472754:role/DynamoDBLamdaFullAccessRole
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - sqs:SendMessage
      - sqs:ReceiveMessage
      - sqs:DeleteMessage
      - sqs:GetQueueAttributes
    Resource: "${construct:catalogItemsQueue.queueUrl}"
  - Effect: "Allow"
    Action:
      - sqs:ListQueues
    Resource: "${construct:catalogItemsQueue.queueUrl}"

constructs:
  catalogItemsQueue:
    type: queue
    worker:
      handler: catalogBatchProcess.catalogBatchProcess
      # events:
      #   - sqs:
      #       arn: !GetAtt catalogItemsQueue.Arn
            # arn: !GetAtt  catalogItemsQueue.Arn
      batchSize: 5

functions:
  products:
    handler: getProductsList.getProductsList
    events:
      - http:
          path: /products
          method: get
          # cors: true
          cors:
            origin: "https://dqbw3kxelkxvj.cloudfront.net" # <-- Specify allowed origin
            headers: "*" # <-- Specify allowed headers
          # request:
          #   schemas:
          #     application/json:
          #       schema: ${file(api_schema/get_product_list.schema.json)}
          # above commented code might lead to a failing response
          documentation:
            summary: "Get all product"
            description: "Returns a array of all products"
            requestBody:
              description: ""
            requestModels:
              application/json: "application/json"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Success"
                responseModels:
                  application/json: "application/json"
  productsId:
    handler: getProductsById.getProductsById
    events:
      - http:
          path: /products/{productId}
          method: get
          request:
            parameters:
              paths:
                productId: true
          # cors: true
          cors:
            origin: "https://dqbw3kxelkxvj.cloudfront.net" # <-- Specify allowed origin
            headers: "*"
          documentation:
            summary: "Get product by id"
            description: "Returns specific product, if Id found."
            requestBody:
              description: ""
            requestModels:
              application/json: "application/json"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Success"
                responseModels:
                  application/json: "application/json"
  putProduct:
    handler: putProduct.putProduct
    events:
      - http:
          path: /product
          method: put
          # cors: true
          cors:
            origin: "https://dqbw3kxelkxvj.cloudfront.net" # <-- Specify allowed origin
            headers: "*"
          documentation:
            summary: "Put product."
            description: "Put product item into the DB."
            requestBody:
              description: ""
            requestModels:
              application/json: "application/json"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Success"
                responseModels:
                  application/json: "application/json"
  # catalogBatchProcess:
  #   handler: catalogBatchProcess.catalogBatchProcess
  #   events:
  #     - sqs:
  #         arn: !GetAtt  catalogItemsQueue.Arn
  #         # arn: !GetAtt  catalogItemsQueue.Arn
  #         batchSize: 5
custom:
  documentation:
    version: "1"
    title: "Product API"
    description: "This is Product API"
    models: []
# resources:
#   - ${file(./sls/resources.yml)}
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sqs-permissions-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                Resource: arn:aws:sqs:us-east-1:043770472754:${construct:catalogItemsQueue.queueUrl}
                Condition:
                  ArnEquals:
                    "aws:SourceArn": "arn:aws:sqs:us-east-1:043770472754:${construct:catalogItemsQueue.queueUrl}"

